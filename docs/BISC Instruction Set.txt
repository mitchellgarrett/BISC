-------------------------------------
Basic Instruction Set Computer (BISC)
-------------------------------------


---------
Registers
---------
pc - program counter
sp - stack pointer
fp - frame pointer
ra - return address
rv - return value
ri - temporary register
r0-r7 - general-purpose registers
t0-t7 - temporary registers
f0-f7 - general-purpose floating-point registers
ft0-ft7 - temporary floating-point registers

------------------------
Control Status Registers [WIP]
------------------------
0x00, model - model number of this CPU
0x01, cycle - CPU cycle count
0x02, cycleh - upper 32-bits of cycle
0x03, etype - exception type
0x04, epc - exception PC
0x05, eval - exception value

------------------
General Formatting
------------------
comment ::= ;
reg ::= register
mem ::= reg[0]
imm ::= 0 | 0x0 | 0b0 | '0'

------------
Instructions
------------

General
-------
nop
hlt
sys  arg0 (reg)
call addr (reg)
ret


Stack Operations
----------------
push arg0 (reg)*
push arg0 (imm)*
pushw arg0 (reg)*
pushw arg0 (imm)*
pushb arg0 (reg)*
pushb arg0 (imm)*

pop  arg0 (reg)*
popw  arg0 (reg)*
popb  arg0 (reg)*


Loading and Storing
-------------------
lli  dest (reg), arg0 (imm)
lui  dest (reg), arg0 (imm)
mov  dest (reg), arg0 (reg)
li   dest (reg), arg0 (imm)*
la   dest (reg), arg0 (imm)*

lw   dest (reg), arg0 (mem)
lh   dest (reg), arg0 (mem)
lb   dest (reg), arg0 (mem)
sw   arg0 (reg), dest (mem)
sh   arg0 (reg), dest (mem)
sb   arg0 (reg), dest (mem)

lw   dest (reg), arg0 (imm)*
lh   dest (reg), arg0 (imm)*
lb   dest (reg), arg0 (imm)*
sw   arg0 (reg), dest (imm)*
sh   arg0 (reg), dest (imm)*
sb   arg0 (reg), dest (imm)*


Arithmetic and Logic
--------------------
addi dest (reg), arg0 (reg), arg1 (imm)*
subi dest (reg), arg0 (reg), arg1 (imm)*
muli dest (reg), arg0 (reg), arg1 (imm)*
divi dest (reg), arg0 (reg), arg1 (imm)*
modi dest (reg), arg0 (reg), arg1 (imm)*

add   dest (reg), arg0 (reg), arg1 (reg)
sub   dest (reg), arg0 (reg), arg1 (reg)
mul   dest (reg), arg0 (reg), arg1 (reg)
mulh  dest (reg), arg0 (reg), arg1 (reg)
mulhu dest (reg), arg0 (reg), arg1 (reg)
div   dest (reg), arg0 (reg), arg1 (reg)
divh  dest (reg), arg0 (reg), arg1 (reg)
divhu dest (reg), arg0 (reg), arg1 (reg)
mod   dest (reg), arg0 (reg), arg1 (reg)
modu  dest (reg), arg0 (reg), arg1 (reg)

neg  dest (reg), arg0 (reg)
not  dest (reg), arg0 (reg)
inv  dest (reg), arg0 (reg)

and  dest (reg), arg0 (reg), arg1 (reg)
or   dest (reg), arg0 (reg), arg1 (reg)
xor  dest (reg), arg0 (reg), arg1 (reg)
bsl  dest (reg), arg0 (reg), arg1 (reg)
bsr  dest (reg), arg0 (reg), arg1 (reg)


Jumping and branching
---------------------
jmp addr (reg)
jez addr (reg), arg0 (reg)
jnz addr (reg), arg0 (reg)
jeq addr (reg), arg0 (reg), arg1 (reg)
jne addr (reg), arg0 (reg), arg1 (reg)
jgt addr (reg), arg0 (reg), arg1 (reg)
jlt addr (reg), arg0 (reg), arg1 (reg)
jge addr (reg), arg0 (reg), arg1 (reg)
jle addr (reg), arg0 (reg), arg1 (reg)


Floating Point Instructions
---------------------------
fadd
fsub
fmul
fdiv
fabs
fsqrt
fpow
fjez
fjnz
fjeq
fjne
fjlt
fle


--------
Sections [WIP]
--------
section .text
section .data
section .rodata

global main
var_name .string "This is a string\0"
var_name .byte 'A'
var_name .word 16
var_name .dword 32
var_name .float 32